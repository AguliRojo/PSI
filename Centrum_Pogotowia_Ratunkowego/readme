Opis funkcji:
manage.py - command-line , do interakcji
mysite.py - nazwa projektu , użyte do referencji
__init__.py - konstruktor
settings.py - ustawienia django
utls.py - The URL declarations for this Django project; a “table of contents” of your Django-powered site.
^ To chyba referencje
asgi.py - polaczenie sie z ASGI serwerami
wsgi.py - polaczenie sie z WSGI serwerami

Notatki Ogólne(wykład):
Aplikacje:
po zainstalowaniu aplikacji trzeba dodać do settings.py do INSTALLED_APPS nazwę aplikacji
tworzenie - django-admin.py startapp <nazwa>

Podstawowe metody http:
GET /vikings – odczyt danych
POST /vikings – przesłanie danych do zasobu
PUT, PATCH /vikings/1 - aktualizacja
DELETE /vikings/1 - usunięcie zasobu

Kody odpowiedzi HTTP:
kody informacyjne - 1xx
100 - Continue - prośba o dalsze wysyłanie zapytania
111 - Connection refused
kody powodzenia - 2xx
200 - OK
201 - Created
202 - Accepted
kody przekierowania - 3xx
300 - Multiple Choices
302 - Found
305 - Use Proxy
310 - Too many redirects
kody błędu aplikacji klienta - 4xx
400 - Bad Request
401 - Unauthorized
403 - Forbidden
404 - Not found
kody błędu serwera HTTP - 5xx
500 - Internal Server Error
502 - Bad Gateway

Projekt(info z wykładu):
Planowane Testy:
dodanie nowego rekordu
unikalność zasobu
filtrowanie zasobu
wyświetlanie kolekcji
modyfikacja rekordu
wyświetlanie pojedynczego rekordu

Uruchomienie testów:
pytest
Uruchamiane są metody zaczynające się od test_

Laczenie sie do bazy localhosta:
Common ports that might be used to access phpMyAdmin are:
Access phpMyAdmin on port 80:http://localhost:80/phpmyadmin
Access phpMyAdmin on port 8080:http://localhost:8080/phpmyadmin
Access phpMyAdmin on port 8888:http://localhost:8888/phpmyadmin
Access phpMyAdmin on port 8890:http://localhost:8890/phpmyadmin
Access phpMyAdmin on port 8889:http://localhost:8889/phpmyadmin

KOmendy:
python manage.py runserver - uruchom server port 8000(domyslny)
python manage.py migrate - stworz środowisko pod wymagane tabele (?)
python manage.py makemigrations CPR - aktualizuj modele (wykonaj komendy SQL) z aplikacji CPR
python manage.py sqlmigrate CPR 0001 - komenda podobna do DESCRIBE DATABASE
^(wyglada na to ze przygotowuje to pushniecia bazy)
python manage.py check - sprawdz czy nie ma problemów w projekcie(?)
python manage.py migrate - (tak powtarza sie) utworz tabele z modeli , dodaj do bazy danych
python manage.py shell - coś API invoking Python shell
Dodawanie rekordów wyjasnione w example 2


CO wykonac:
1. CPR -> models.  Ustalic połączenia i je zaimplementowac (obecnie jest placeholder)


Jak wprowadzić zmiany modelu:
Change your models (in models.py).
Run python manage.py makemigrations to create migrations for those changes
Run python manage.py migrate to apply those changes to the database.


Database
User: root
Email: root@root.root
password: Styczen2021

Django view zawsze zwraca HttpResponse, jeśli nie zwraca, to zwraca błąd (np.Http404)


How to do create tests
Good rules-of-thumb include having:
a separate TestClass for each model or view
a separate test method for each set of conditions you want to test
test method names that describe their function